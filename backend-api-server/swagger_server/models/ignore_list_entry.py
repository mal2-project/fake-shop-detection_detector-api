# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IgnoreListEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, site_id: str=None, site_base_url: str=None, ignorelist_name: str=None, ignorelist_description: str=None, ignorelist_url: str=None, ignorelist_logo: str=None, site_added_date: date=None, site_type: str=None):  # noqa: E501
        """IgnoreListEntry - a model defined in Swagger

        :param site_id: The site_id of this IgnoreListEntry.  # noqa: E501
        :type site_id: str
        :param site_base_url: The site_base_url of this IgnoreListEntry.  # noqa: E501
        :type site_base_url: str
        :param ignorelist_name: The ignorelist_name of this IgnoreListEntry.  # noqa: E501
        :type ignorelist_name: str
        :param ignorelist_description: The ignorelist_description of this IgnoreListEntry.  # noqa: E501
        :type ignorelist_description: str
        :param ignorelist_url: The ignorelist_url of this IgnoreListEntry.  # noqa: E501
        :type ignorelist_url: str
        :param ignorelist_logo: The ignorelist_logo of this IgnoreListEntry.  # noqa: E501
        :type ignorelist_logo: str
        :param site_added_date: The site_added_date of this IgnoreListEntry.  # noqa: E501
        :type site_added_date: date
        :param site_type: The site_type of this IgnoreListEntry.  # noqa: E501
        :type site_type: str
        """
        self.swagger_types = {
            'site_id': str,
            'site_base_url': str,
            'ignorelist_name': str,
            'ignorelist_description': str,
            'ignorelist_url': str,
            'ignorelist_logo': str,
            'site_added_date': date,
            'site_type': str
        }

        self.attribute_map = {
            'site_id': 'site_id',
            'site_base_url': 'site_baseURL',
            'ignorelist_name': 'ignorelist-name',
            'ignorelist_description': 'ignorelist-description',
            'ignorelist_url': 'ignorelist-url',
            'ignorelist_logo': 'ignorelist-logo',
            'site_added_date': 'site-added-date',
            'site_type': 'site-type'
        }
        self._site_id = site_id
        self._site_base_url = site_base_url
        self._ignorelist_name = ignorelist_name
        self._ignorelist_description = ignorelist_description
        self._ignorelist_url = ignorelist_url
        self._ignorelist_logo = ignorelist_logo
        self._site_added_date = site_added_date
        self._site_type = site_type

    @classmethod
    def from_dict(cls, dikt) -> 'IgnoreListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ignore-List-Entry of this IgnoreListEntry.  # noqa: E501
        :rtype: IgnoreListEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def site_id(self) -> str:
        """Gets the site_id of this IgnoreListEntry.

        ID as provided by the server  # noqa: E501

        :return: The site_id of this IgnoreListEntry.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: str):
        """Sets the site_id of this IgnoreListEntry.

        ID as provided by the server  # noqa: E501

        :param site_id: The site_id of this IgnoreListEntry.
        :type site_id: str
        """

        self._site_id = site_id

    @property
    def site_base_url(self) -> str:
        """Gets the site_base_url of this IgnoreListEntry.


        :return: The site_base_url of this IgnoreListEntry.
        :rtype: str
        """
        return self._site_base_url

    @site_base_url.setter
    def site_base_url(self, site_base_url: str):
        """Sets the site_base_url of this IgnoreListEntry.


        :param site_base_url: The site_base_url of this IgnoreListEntry.
        :type site_base_url: str
        """

        self._site_base_url = site_base_url

    @property
    def ignorelist_name(self) -> str:
        """Gets the ignorelist_name of this IgnoreListEntry.


        :return: The ignorelist_name of this IgnoreListEntry.
        :rtype: str
        """
        return self._ignorelist_name

    @ignorelist_name.setter
    def ignorelist_name(self, ignorelist_name: str):
        """Sets the ignorelist_name of this IgnoreListEntry.


        :param ignorelist_name: The ignorelist_name of this IgnoreListEntry.
        :type ignorelist_name: str
        """

        self._ignorelist_name = ignorelist_name

    @property
    def ignorelist_description(self) -> str:
        """Gets the ignorelist_description of this IgnoreListEntry.


        :return: The ignorelist_description of this IgnoreListEntry.
        :rtype: str
        """
        return self._ignorelist_description

    @ignorelist_description.setter
    def ignorelist_description(self, ignorelist_description: str):
        """Sets the ignorelist_description of this IgnoreListEntry.


        :param ignorelist_description: The ignorelist_description of this IgnoreListEntry.
        :type ignorelist_description: str
        """

        self._ignorelist_description = ignorelist_description

    @property
    def ignorelist_url(self) -> str:
        """Gets the ignorelist_url of this IgnoreListEntry.


        :return: The ignorelist_url of this IgnoreListEntry.
        :rtype: str
        """
        return self._ignorelist_url

    @ignorelist_url.setter
    def ignorelist_url(self, ignorelist_url: str):
        """Sets the ignorelist_url of this IgnoreListEntry.


        :param ignorelist_url: The ignorelist_url of this IgnoreListEntry.
        :type ignorelist_url: str
        """

        self._ignorelist_url = ignorelist_url

    @property
    def ignorelist_logo(self) -> str:
        """Gets the ignorelist_logo of this IgnoreListEntry.


        :return: The ignorelist_logo of this IgnoreListEntry.
        :rtype: str
        """
        return self._ignorelist_logo

    @ignorelist_logo.setter
    def ignorelist_logo(self, ignorelist_logo: str):
        """Sets the ignorelist_logo of this IgnoreListEntry.


        :param ignorelist_logo: The ignorelist_logo of this IgnoreListEntry.
        :type ignorelist_logo: str
        """

        self._ignorelist_logo = ignorelist_logo

    @property
    def site_added_date(self) -> date:
        """Gets the site_added_date of this IgnoreListEntry.


        :return: The site_added_date of this IgnoreListEntry.
        :rtype: date
        """
        return self._site_added_date

    @site_added_date.setter
    def site_added_date(self, site_added_date: date):
        """Sets the site_added_date of this IgnoreListEntry.


        :param site_added_date: The site_added_date of this IgnoreListEntry.
        :type site_added_date: date
        """

        self._site_added_date = site_added_date

    @property
    def site_type(self) -> str:
        """Gets the site_type of this IgnoreListEntry.

        classification of websitesite type ecommerce - An ecommerce website is any website that directly sells a product or service. Not to be confused with a business website, with an ecommerce website you can add products or services into your cart, and pay for them through the site media_or_entertainment - Media websites contain regularly updated content on current affairs, weather, sports and entertainment. News sites like CNN and entertainment sites like ELLE both fall into this category. The content on media sites is dynamic, meaning it’s updated regularly. Big media sites will publish multiple articles and videos every single day. blog - A blog is a website that’s regularly updated, run by one person or a small group, and is normally written in a laid-back style business - A business website is any kind of website that describes your business. crowdfunding - Crowdfunding websites work by taking ‘pledges’ of different amounts from lots of people, in order to hit the target amount needed to produce the product educational - The term ‘educational’ covers a broad range of websites.Educational websites use any combination of games, articles, videos and images to educate their audience. These might be geared towards fun learning for children, or offer courses to adults, such as Coursera and EdX. nonprofit - Nonprofits may not be classed as businesses in the same way, but they still need a website. These will generally be quite simple, outlining what the nonprofit is about and showing visitors how they can get involved, donate, or support in some other way. personal - Website that's dedicated to your ‘personal brand’ not a business website. portfolio - If you’re a writer, artist or designer, you’ll want to go one step further than a personal website. These are a way for creatives to showcase their work to future employees, market themselves as freelancers, and generally get their name (and work) out into the big wide world. portal - Portal websites, like Yahoo, bring together information from lots of different sites and present them in one place. Web portals can be internal websites for organizations like schools, or for big businesses. It’s a centralized place to share news, training and updates, and for students or employees to access their emails and files. Users will need their own specific login to access these portals. social_media - A special form of portal. Social media refers to websites and applications that are designed to allow people to share content quickly, efficiently, and in real-time. ... The ability to share photos, opinions, events, etc search_engine - Specific site for content discovery on the web or within a limited section of the web internet_forum - A specific form of portal that is mainly dedicated to information exchange with other users. webbased_application - machine to machine interaction or user gateway for users interacting with an application that does not match the other types unknown - uncategorized   # noqa: E501

        :return: The site_type of this IgnoreListEntry.
        :rtype: str
        """
        return self._site_type

    @site_type.setter
    def site_type(self, site_type: str):
        """Sets the site_type of this IgnoreListEntry.

        classification of websitesite type ecommerce - An ecommerce website is any website that directly sells a product or service. Not to be confused with a business website, with an ecommerce website you can add products or services into your cart, and pay for them through the site media_or_entertainment - Media websites contain regularly updated content on current affairs, weather, sports and entertainment. News sites like CNN and entertainment sites like ELLE both fall into this category. The content on media sites is dynamic, meaning it’s updated regularly. Big media sites will publish multiple articles and videos every single day. blog - A blog is a website that’s regularly updated, run by one person or a small group, and is normally written in a laid-back style business - A business website is any kind of website that describes your business. crowdfunding - Crowdfunding websites work by taking ‘pledges’ of different amounts from lots of people, in order to hit the target amount needed to produce the product educational - The term ‘educational’ covers a broad range of websites.Educational websites use any combination of games, articles, videos and images to educate their audience. These might be geared towards fun learning for children, or offer courses to adults, such as Coursera and EdX. nonprofit - Nonprofits may not be classed as businesses in the same way, but they still need a website. These will generally be quite simple, outlining what the nonprofit is about and showing visitors how they can get involved, donate, or support in some other way. personal - Website that's dedicated to your ‘personal brand’ not a business website. portfolio - If you’re a writer, artist or designer, you’ll want to go one step further than a personal website. These are a way for creatives to showcase their work to future employees, market themselves as freelancers, and generally get their name (and work) out into the big wide world. portal - Portal websites, like Yahoo, bring together information from lots of different sites and present them in one place. Web portals can be internal websites for organizations like schools, or for big businesses. It’s a centralized place to share news, training and updates, and for students or employees to access their emails and files. Users will need their own specific login to access these portals. social_media - A special form of portal. Social media refers to websites and applications that are designed to allow people to share content quickly, efficiently, and in real-time. ... The ability to share photos, opinions, events, etc search_engine - Specific site for content discovery on the web or within a limited section of the web internet_forum - A specific form of portal that is mainly dedicated to information exchange with other users. webbased_application - machine to machine interaction or user gateway for users interacting with an application that does not match the other types unknown - uncategorized   # noqa: E501

        :param site_type: The site_type of this IgnoreListEntry.
        :type site_type: str
        """
        allowed_values = ["ecommerce", "media_or_entertainment", "blog", "business", "crowdfunding", "educational", "nonprofit", "personal", "portfolio", "portal", "social_media", "search_engine", "internet_forum", "webbased_application", "unknown"]  # noqa: E501
        if site_type not in allowed_values:
            raise ValueError(
                "Invalid value for `site_type` ({0}), must be one of {1}"
                .format(site_type, allowed_values)
            )

        self._site_type = site_type
