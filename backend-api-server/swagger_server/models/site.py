# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
import re
import logging


class Site(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, site_base_url: str=None, re_process: bool=False, client_id: str=None):  # noqa: E501
        """Site - a model defined in Swagger

        :param site_base_url: The site_base_url of this Site.  # noqa: E501
        :type site_base_url: str
        :param re_process: The re_process of this Site.  # noqa: E501
        :type re_process: bool
        :param client_id: The client_id of this Site.  # noqa: E501
        :type client_id: str
        """
        self.swagger_types = {
            'site_base_url': str,
            're_process': bool,
            'client_id': str
        }

        self.attribute_map = {
            'site_base_url': 'site_baseURL',
            're_process': 're_process',
            'client_id': 'clientID'
        }
        self._site_base_url = site_base_url
        self._re_process = re_process
        self._client_id = client_id

    @classmethod
    def from_dict(cls, dikt) -> 'Site':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The site of this Site.  # noqa: E501
        :rtype: Site
        """
        return util.deserialize_model(dikt, cls)

    @property
    def site_base_url(self) -> str:
        """Gets the site_base_url of this Site.

        the site base url to analyze  # noqa: E501

        :return: The site_base_url of this Site.
        :rtype: str
        """
        #mandatory parameter
        return self._site_base_url

    @site_base_url.setter
    def site_base_url(self, site_base_url: str):
        """Sets the site_base_url of this Site.

        the site base url to analyze  # noqa: E501

        :param site_base_url: The site_base_url of this Site.
        :type site_base_url: str
        """
        if site_base_url is None:
            raise ValueError("Invalid value for `site_base_url`, must not be `None`")  # noqa: E501

        if self.__checkURL(site_base_url) is False:
            logging.debug("received non valid url for analysis: "+site_base_url)
            raise ValueError("Invalid value for `site_base_url`, must be a valid URL")

        self._site_base_url = site_base_url

    @property
    def re_process(self) -> bool:
        """Gets the re_process of this Site.

        ask the server to run re-analys of site. Site is only processed by the MAL2 models if the site is not whitelisted, blacklisted or ignorelisted  # noqa: E501

        :return: The re_process of this Site.
        :rtype: bool
        """

        #in case no param was defined - re_process is false
        if self._re_process is None:
            return False

        return self._re_process

    @re_process.setter
    def re_process(self, re_process: bool):
        """Sets the re_process of this Site.

        ask the server to run re-analys of site. Site is only processed by the MAL2 models if the site is not whitelisted, blacklisted or ignorelisted  # noqa: E501

        :param re_process: The re_process of this Site.
        :type re_process: bool
        """

        self._re_process = re_process

    @property
    def client_id(self) -> str:
        """Gets the client_id of this Site.

        client ID for debugging purposes on server  # noqa: E501

        :return: The client_id of this Site.
        :rtype: str
        """
         #in case no param was defined - clientID is ""
        if self._client_id is None:
            return ""

        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this Site.

        client ID for debugging purposes on server  # noqa: E501

        :param client_id: The client_id of this Site.
        :type client_id: str
        """

        self._client_id = client_id


    def __checkURL(self, aPotentialURL:str):
        """is URL wellformed check within the model class """
        regex = re.compile(
        r'^(?:http|ftp)s?://' # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|' #domain...
        r'localhost|' #localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})' # ...or ip
        r'(?::\d+)?' # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)

        #print(re.match(regex, "http://www.example.com") is not None) # True

        if re.match(regex, aPotentialURL) is not None:
            return True
        return False
