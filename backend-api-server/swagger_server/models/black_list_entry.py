# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BlackListEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, site_id: str=None, site_base_url: str=None, blacklist_name: str=None, blacklist_description: str=None, blacklist_logo: str=None, blacklist_url: str=None, site_added_date: date=None, site_type: str=None, site_screenshot: str=None, site_information_link: str=None):  # noqa: E501
        """BlackListEntry - a model defined in Swagger

        :param site_id: The site_id of this BlackListEntry.  # noqa: E501
        :type site_id: str
        :param site_base_url: The site_base_url of this BlackListEntry.  # noqa: E501
        :type site_base_url: str
        :param blacklist_name: The blacklist_name of this BlackListEntry.  # noqa: E501
        :type blacklist_name: str
        :param blacklist_description: The blacklist_description of this BlackListEntry.  # noqa: E501
        :type blacklist_description: str
        :param blacklist_logo: The blacklist_logo of this BlackListEntry.  # noqa: E501
        :type blacklist_logo: str
        :param blacklist_url: The blacklist_url of this BlackListEntry.  # noqa: E501
        :type blacklist_url: str
        :param site_added_date: The site_added_date of this BlackListEntry.  # noqa: E501
        :type site_added_date: date
        :param site_type: The site_type of this BlackListEntry.  # noqa: E501
        :type site_type: str
        :param site_screenshot: The site_screenshot of this BlackListEntry.  # noqa: E501
        :type site_screenshot: str
        :param site_information_link: The site_information_link of this BlackListEntry.  # noqa: E501
        :type site_information_link: str
        """
        self.swagger_types = {
            'site_id': str,
            'site_base_url': str,
            'blacklist_name': str,
            'blacklist_description': str,
            'blacklist_logo': str,
            'blacklist_url': str,
            'site_added_date': date,
            'site_type': str,
            'site_screenshot': str,
            'site_information_link': str
        }

        self.attribute_map = {
            'site_id': 'site_id',
            'site_base_url': 'site_baseURL',
            'blacklist_name': 'blacklist-name',
            'blacklist_description': 'blacklist-description',
            'blacklist_logo': 'blacklist-logo',
            'blacklist_url': 'blacklist-url',
            'site_added_date': 'site-added-date',
            'site_type': 'site-type',
            'site_screenshot': 'site-screenshot',
            'site_information_link': 'site-information-link'
        }
        self._site_id = site_id
        self._site_base_url = site_base_url
        self._blacklist_name = blacklist_name
        self._blacklist_description = blacklist_description
        self._blacklist_logo = blacklist_logo
        self._blacklist_url = blacklist_url
        self._site_added_date = site_added_date
        self._site_type = site_type
        self._site_screenshot = site_screenshot
        self._site_information_link = site_information_link

    @classmethod
    def from_dict(cls, dikt) -> 'BlackListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Black-List-Entry of this BlackListEntry.  # noqa: E501
        :rtype: BlackListEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def site_id(self) -> str:
        """Gets the site_id of this BlackListEntry.

        ID as provided by the server  # noqa: E501

        :return: The site_id of this BlackListEntry.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: str):
        """Sets the site_id of this BlackListEntry.

        ID as provided by the server  # noqa: E501

        :param site_id: The site_id of this BlackListEntry.
        :type site_id: str
        """

        self._site_id = site_id

    @property
    def site_base_url(self) -> str:
        """Gets the site_base_url of this BlackListEntry.


        :return: The site_base_url of this BlackListEntry.
        :rtype: str
        """
        return self._site_base_url

    @site_base_url.setter
    def site_base_url(self, site_base_url: str):
        """Sets the site_base_url of this BlackListEntry.


        :param site_base_url: The site_base_url of this BlackListEntry.
        :type site_base_url: str
        """

        self._site_base_url = site_base_url

    @property
    def blacklist_name(self) -> str:
        """Gets the blacklist_name of this BlackListEntry.


        :return: The blacklist_name of this BlackListEntry.
        :rtype: str
        """
        return self._blacklist_name

    @blacklist_name.setter
    def blacklist_name(self, blacklist_name: str):
        """Sets the blacklist_name of this BlackListEntry.


        :param blacklist_name: The blacklist_name of this BlackListEntry.
        :type blacklist_name: str
        """

        self._blacklist_name = blacklist_name

    @property
    def blacklist_description(self) -> str:
        """Gets the blacklist_description of this BlackListEntry.


        :return: The blacklist_description of this BlackListEntry.
        :rtype: str
        """
        return self._blacklist_description

    @blacklist_description.setter
    def blacklist_description(self, blacklist_description: str):
        """Sets the blacklist_description of this BlackListEntry.


        :param blacklist_description: The blacklist_description of this BlackListEntry.
        :type blacklist_description: str
        """

        self._blacklist_description = blacklist_description

    @property
    def blacklist_logo(self) -> str:
        """Gets the blacklist_logo of this BlackListEntry.


        :return: The blacklist_logo of this BlackListEntry.
        :rtype: str
        """
        return self._blacklist_logo

    @blacklist_logo.setter
    def blacklist_logo(self, blacklist_logo: str):
        """Sets the blacklist_logo of this BlackListEntry.


        :param blacklist_logo: The blacklist_logo of this BlackListEntry.
        :type blacklist_logo: str
        """

        self._blacklist_logo = blacklist_logo

    @property
    def blacklist_url(self) -> str:
        """Gets the blacklist_url of this BlackListEntry.


        :return: The blacklist_url of this BlackListEntry.
        :rtype: str
        """
        return self._blacklist_url

    @blacklist_url.setter
    def blacklist_url(self, blacklist_url: str):
        """Sets the blacklist_url of this BlackListEntry.


        :param blacklist_url: The blacklist_url of this BlackListEntry.
        :type blacklist_url: str
        """

        self._blacklist_url = blacklist_url

    @property
    def site_added_date(self) -> date:
        """Gets the site_added_date of this BlackListEntry.


        :return: The site_added_date of this BlackListEntry.
        :rtype: date
        """
        return self._site_added_date

    @site_added_date.setter
    def site_added_date(self, site_added_date: date):
        """Sets the site_added_date of this BlackListEntry.


        :param site_added_date: The site_added_date of this BlackListEntry.
        :type site_added_date: date
        """

        self._site_added_date = site_added_date

    @property
    def site_type(self) -> str:
        """Gets the site_type of this BlackListEntry.

        classification of fraudulent ecommerce sites based on the classification provided by https://www.watchlist-internet.at fraudulent_online_shop and brand_counterfeiter - Unfortunately, more and more consumers are becoming victims of fraudulent Internet ecommerce. Sites as the Watchlist Internet provide manually currated lists of online shops that, despite payment, do not deliver any goods (fraudulent_online_shops i.e. fake shops) or sell counterfeit goods or are only out for collecting your data (fraudulent_brand_counterfeiter). fraudulent_streaming_platform - Streaming platforms that advertise with a free registration but illicitly request a premium-fee. Watchlist Internet provides a list of fraudulent streaming platforms fraudulent_real_estate_agency - dubious real estate agencies that are known in connection or are classified as ad scams. fraudulent_travel_agency_or_booking_platform - fraudulent online travel agencies and hotel booking platforms. Criminals create websites with tempting offers. Some of the websites are similar to well-known holiday platforms to build trust. Bookings from such websites never reach the actual accommodations and airlines despite prepayments. Transferred money is usually lost and ends up in the hands of criminals. Subscription traps are also known in connection with fraudulent holiday platforms. fraudulent_craft_services - Reports on fraudulent key services, installers, moving and electrical companies or other craft services to the Watchlist Internet. The victims report inferior completion of the tasks and usury prices. Payments must be made in cash immediately. A later complaint is not possible due to missing or insufficient company and contact details. fraudulent_freight_forwarders -  dubious freight forwarders are constantly reported. Particular caution is required here when buying a car or buying bulky goods using classified ads. Criminals advertise tempting offers on classifieds portals and invent reasons for processing through a shipping company. The websites of the alleged delivery services and shipping companies are created by the criminals themselves. The companies do not exist and all payments for deliveries, cars, motorbikes, campers, tractors, fuel and other goods are lost and end up in the hands of the criminals. fraudulent_survey_platform - Fraudulent survey platforms and market research portals are regularly reported to the Watchlist Internet. Criminals advertise easy earning opportunities on job portals by participating in studies. For this purpose, ID documents should be shared when registering. Criminals use this to open an account with banks and pretend to their victims that a video identification process of a bank should be tested as part of the first survey. This gives criminals a bank account on behalf of their victims that can be used for money laundering.   # noqa: E501

        :return: The site_type of this BlackListEntry.
        :rtype: str
        """
        return self._site_type

    @site_type.setter
    def site_type(self, site_type: str):
        """Sets the site_type of this BlackListEntry.

        classification of fraudulent ecommerce sites based on the classification provided by https://www.watchlist-internet.at fraudulent_online_shop and brand_counterfeiter - Unfortunately, more and more consumers are becoming victims of fraudulent Internet ecommerce. Sites as the Watchlist Internet provide manually currated lists of online shops that, despite payment, do not deliver any goods (fraudulent_online_shops i.e. fake shops) or sell counterfeit goods or are only out for collecting your data (fraudulent_brand_counterfeiter). fraudulent_streaming_platform - Streaming platforms that advertise with a free registration but illicitly request a premium-fee. Watchlist Internet provides a list of fraudulent streaming platforms fraudulent_real_estate_agency - dubious real estate agencies that are known in connection or are classified as ad scams. fraudulent_travel_agency_or_booking_platform - fraudulent online travel agencies and hotel booking platforms. Criminals create websites with tempting offers. Some of the websites are similar to well-known holiday platforms to build trust. Bookings from such websites never reach the actual accommodations and airlines despite prepayments. Transferred money is usually lost and ends up in the hands of criminals. Subscription traps are also known in connection with fraudulent holiday platforms. fraudulent_craft_services - Reports on fraudulent key services, installers, moving and electrical companies or other craft services to the Watchlist Internet. The victims report inferior completion of the tasks and usury prices. Payments must be made in cash immediately. A later complaint is not possible due to missing or insufficient company and contact details. fraudulent_freight_forwarders -  dubious freight forwarders are constantly reported. Particular caution is required here when buying a car or buying bulky goods using classified ads. Criminals advertise tempting offers on classifieds portals and invent reasons for processing through a shipping company. The websites of the alleged delivery services and shipping companies are created by the criminals themselves. The companies do not exist and all payments for deliveries, cars, motorbikes, campers, tractors, fuel and other goods are lost and end up in the hands of the criminals. fraudulent_survey_platform - Fraudulent survey platforms and market research portals are regularly reported to the Watchlist Internet. Criminals advertise easy earning opportunities on job portals by participating in studies. For this purpose, ID documents should be shared when registering. Criminals use this to open an account with banks and pretend to their victims that a video identification process of a bank should be tested as part of the first survey. This gives criminals a bank account on behalf of their victims that can be used for money laundering.   # noqa: E501

        :param site_type: The site_type of this BlackListEntry.
        :type site_type: str
        """
        allowed_values = ["fraudulent_online_shop", "fraudulent_brand_counterfeiter", "fraudulenty_streaming_platform", "fraudulent_real_estate_agency", "fraudulent_travel_agency_or_booking_platform", "fraudulent_craft_service", "fraudulent_freight_forwarder", "fraudulent_survey_platform"]  # noqa: E501
        if site_type not in allowed_values:
            raise ValueError(
                "Invalid value for `site_type` ({0}), must be one of {1}"
                .format(site_type, allowed_values)
            )

        self._site_type = site_type

    @property
    def site_screenshot(self) -> str:
        """Gets the site_screenshot of this BlackListEntry.


        :return: The site_screenshot of this BlackListEntry.
        :rtype: str
        """
        return self._site_screenshot

    @site_screenshot.setter
    def site_screenshot(self, site_screenshot: str):
        """Sets the site_screenshot of this BlackListEntry.


        :param site_screenshot: The site_screenshot of this BlackListEntry.
        :type site_screenshot: str
        """

        self._site_screenshot = site_screenshot

    @property
    def site_information_link(self) -> str:
        """Gets the site_information_link of this BlackListEntry.


        :return: The site_information_link of this BlackListEntry.
        :rtype: str
        """
        return self._site_information_link

    @site_information_link.setter
    def site_information_link(self, site_information_link: str):
        """Sets the site_information_link of this BlackListEntry.


        :param site_information_link: The site_information_link of this BlackListEntry.
        :type site_information_link: str
        """

        self._site_information_link = site_information_link
